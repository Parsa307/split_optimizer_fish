#!/usr/bin/env fish

set CONFIG_FILE ~/.config/split_optimizer/split_optimizer.conf

function print_help
    set script_name (status filename)
    echo "üì¶ Optimize APK bundle (.apks, .apkm, .zip, etc.)"
    echo
    echo "Usage: $script_name your_app.<ext>"
    echo

    if not test -f $CONFIG_FILE
        echo "‚ö†Ô∏è  Config file '$CONFIG_FILE' not found."
    else
        set bad_configs
        for config in LANG DPI ARCH
            set value (grep "^$config=" $CONFIG_FILE | cut -d= -f2 | tr -d ' ')
            if test -z "$value"
                set bad_configs $bad_configs $config
            end
        end

        if test (count $bad_configs) -gt 0
            echo "‚ö†Ô∏è  Invalid config: Missing or empty configs in $CONFIG_FILE: $bad_configs"
        else
            echo "Reads filters from $CONFIG_FILE:"
            for line in (grep -E '^(LANG|DPI|ARCH)=' $CONFIG_FILE)
                set config (string split "=" $line)[1]
                set value (string split "=" $line)[2]
                echo "  - $config: $value"
            end
        end
    end

    echo
    echo "Output file: apk_bundle_optimized.<ext>"
    echo
    exit 0
end

# === Check required tools ===
for dep in unzip zip
    if not type -q $dep
        echo "‚ùå Error: Required command '$dep' not found. Please install it."
        exit 1
    end
end

# === Help flag check ===
if test (count $argv) -gt 0
    if test $argv[1] = "-h" || test $argv[1] = "--help"
        print_help
    end
end

# === Usage check ===
if test (count $argv) -eq 0
    echo "‚ùå Invalid usage: Missing input file."
    echo "Run with -h or --help for usage information."
    exit 1
end

# === Load config ===
if not test -f $CONFIG_FILE
    echo "‚ùå Error: Config file '$CONFIG_FILE' not found."
    exit 1
end

# Parse config
set LANGS (string split ',' (grep '^LANG=' $CONFIG_FILE | cut -d= -f2 | tr -d ' '))
set DPIS  (string split ',' (grep '^DPI='  $CONFIG_FILE | cut -d= -f2 | tr -d ' '))
set ARCHS (string split ',' (grep '^ARCH=' $CONFIG_FILE | cut -d= -f2 | tr -d ' '))

if test -z "$LANGS" || test -z "$DPIS" || test -z "$ARCHS"
    echo "‚ùå Error: Config file is missing required values (LANG, DPI, ARCH)."
    exit 1
end

# === Input setup ===
set INPUT $argv[1]
set EXT (string split '.' (basename $INPUT))[-1]
set BASENAME (string replace ".$EXT" '' (basename $INPUT))
set TMPDIR (mktemp -d)
function cleanup --on-event fish_exit
    rm -r $TMPDIR
end

echo "[*] Extracting $INPUT to $TMPDIR ..."
unzip -q "$INPUT" -d "$TMPDIR"
if test $status -ne 0
    echo "‚ùå Failed to unzip $INPUT"
    exit 1
end

echo "[*] Filtering APK splits and cleaning up ..."

for entry in $TMPDIR/*
    set name (basename $entry)

    if test -d $entry
        echo "  Removing directory: $name"
        rm -r $entry
        continue
    end

    set keep 0
    if test "$name" = "base.apk"
        set keep 1
    end

    for lang in $LANGS
        if test "$name" = "split_config.$lang.apk"
            set keep 1
        end
    end

    for dpi in $DPIS
        if test "$name" = "split_config.$dpi.apk"
            set keep 1
        end
    end

    for arch in $ARCHS
        if test "$name" = "split_config.$arch.apk"
            set keep 1
        end
    end

    if test $keep -eq 1
        echo "  Keeping $name"
    else
        echo "  Removing $name"
        rm $entry
    end
end

set OUTPUT "$BASENAME"_optimized."$EXT"
set OUTPATH "$PWD/$OUTPUT"
echo "[*] Creating optimized APK bundle: $OUTPUT"

cd $TMPDIR
zip -q -r "$OUTPATH" .
if test $status -ne 0
    echo "‚ùå Failed to create $OUTPUT"
    exit 1
end
cd -

echo "[‚úÖ] Done! Optimized APK bundle saved as $OUTPUT"
